// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\commands.tmpl
// templates\main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatescommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5b\x73\xdb\xb8\x15\x7e\xa6\x67\xfc\x1f\xb0\x9c\x64\x87\x4c\x64" +
	"\x2a\xbb\xdd\xe9\x83\xba\xea\x4c\xe2\xdc\x3c\xb3\x76\x5c\xdb\xd9\x7d\x70\x3d\x35\x44\x1e\x49\x18\x83\x00\x0d\x42" +
	"\xbe\x54\xcb\xff\xde\x39\x00\x08\x5e\x44\x29\x76\xda\xa7\xbe\xd8\x12\x0f\x88\x73\xff\xce\x45\xe3\x31\x39\x94\x19" +
	"\x90\x05\x08\x50\x54\x43\x46\x66\x8f\x44\x16\x20\x68\xc1\x0e\x52\xce\x0e\x1c\x41\xaa\x84\xbc\xff\x42\x4e\xbe\x5c" +
	"\x90\x0f\xef\x8f\x2e\x92\xfd\xbd\xf1\x98\x9c\x03\x90\xa5\xd6\x45\x39\x19\x8f\x17\x4c\x2f\x57\xb3\x24\x95\xf9\x38" +
	"\xa3\x82\x01\x5f\x68\xfa\xc8\xa5\x1a\x0f\x5e\xb6\xbf\xb7\xbf\x57\xd0\xf4\x86\x2e\x80\xe4\x94\x09\xfc\xce\xf2\x42" +
	"\x2a\x4d\xa2\xfd\xbd\x60\xbd\x26\x6c\x4e\x92\x23\xf3\xa4\x4c\x3e\xe6\x9a\x54\x55\x38\xcf\x75\xb8\x5e\x13\x10\x19" +
	"\xa9\xaa\xcd\x53\xe7\x5a\x31\xb1\x28\xf1\x64\x69\x3f\xee\x3a\x7d\xc1\x72\xc0\xa3\x9a\xe5\xd0\x3e\xb7\xbf\x17\x84" +
	"\xcf\xd3\x65\x9c\x72\x16\xf6\x5e\x2b\x6e\x16\x63\x50\x4a\xaa\xb2\x4f\x51\xe5\xf8\xdf\xa0\x24\x97\x8b\x31\x97\x8b" +
	"\x3e\xb5\x2c\xe6\x3f\xfd\x65\x9c\xca\x99\xa2\xc3\xa4\x3b\x56\x80\xb2\x24\x59\xdc\x2c\x12\x26\xc6\xcb\x9f\x85\x14" +
	"\xe3\x05\x08\xcd\x21\xa7\x22\xb9\xfb\x39\xdc\xdf\x8b\x51\x93\xf5\x9a\x64\x30\x67\x02\x48\x58\x50\x45\xf3\x32\xac" +
	"\x4d\x71\x40\x14\x15\x0b\x20\xc9\x97\x42\x33\x29\x28\x3f\x35\x74\x4b\x36\x74\x36\x27\x70\x4b\x92\x8b\xc7\x02\x48" +
	"\x38\x93\x92\x03\x15\xee\xf5\x20\x48\xf3\x2c\xf9\xc8\xe9\xa2\x8c\xe2\xe4\x9d\x94\x3c\x42\x0b\x26\x87\xbf\x1d\x9d" +
	"\x50\x6b\xd5\x11\x99\x53\x5e\xc2\x88\x18\xc2\x7b\x28\x53\xc5\x0c\x27\x24\xc6\x35\x0f\xe0\x25\x74\x19\x31\xa1\xff" +
	"\xfa\xcb\x20\x9b\x23\xa4\x0c\xf0\x79\xf3\x6c\x1e\x73\x2e\xe9\x36\x2e\x1f\x2d\x6d\x88\x4f\xf2\x24\x4e\x03\x77\xda" +
	"\xb8\x1c\xb8\x32\x0c\xbf\x75\x63\x13\xbb\x07\xed\x00\x6d\xf9\xef\x0f\xca\x34\xa8\xda\x71\x9b\x7e\xb9\xa7\x4c\x1f" +
	"\x20\x0f\x7b\x70\xbb\x8f\x1c\xfd\x7c\x89\x39\xe8\x84\xe8\xb1\x4d\x39\x4b\xce\x41\x1f\xae\x4a\x2d\x73\xcb\x26\xcd" +
	"\x33\x13\x69\x01\x9b\x93\x36\xf3\xcf\xb4\x74\x1f\xc9\x1a\x05\xb3\xe1\x97\xbc\x63\x22\x3b\xf5\x6f\xd6\xa7\x91\x55" +
	"\x65\xa2\xb5\x61\xb6\x5e\x93\x17\x02\x05\x9d\x4c\x49\xe2\x24\xb6\x4f\x69\xc1\xcc\xc3\x4f\xb2\xff\xf8\x74\x35\xe3" +
	"\x2c\x35\x44\xfb\xb1\x75\x64\x7f\xef\x8e\x2a\x52\xbf\x5f\x55\xe7\xab\x59\x2a\xf3\x9c\x8a\x8c\x60\x70\xe3\x81\xf9" +
	"\x4a\xa4\xed\x13\xa0\xee\x40\xa1\x06\x97\x57\x39\x2d\x2e\x2d\xa6\x5c\xd9\x7f\x46\x2b\x05\x7a\xa5\xc4\x10\x79\x6d" +
	"\x3d\xe8\x9c\xf4\xa2\x34\x57\x19\xc1\xdc\xad\x75\x9c\x0c\xbf\x19\x04\x61\xd6\x84\x44\x38\x31\x1e\x72\xb7\xf4\x83" +
	"\x65\xe4\x5e\x58\x29\xde\x3b\xf8\xf5\xec\xb7\xe6\x40\x35\x72\x22\xf9\x98\xaa\xf6\xf7\x6a\x4b\x3b\x31\x65\x81\x80" +
	"\x86\xf7\xa2\xa4\x5f\xea\x6f\x4e\xd8\xf1\x98\x74\xed\x5c\x55\x18\x37\xde\xc6\x48\xf5\xe1\xb3\xbf\x17\xb4\xcd\x39" +
	"\xfc\x46\xe4\x59\x27\x67\x70\xbb\x62\x0a\x32\x0f\x43\xdd\xab\xad\x6d\x46\xc4\xcb\x6f\xe3\x89\xbc\x32\x70\x98\xfc" +
	"\x8e\x7f\x1d\xbe\x1f\x52\xf1\x99\xde\xc1\x3b\x99\x3d\x92\xaa\x1a\x91\x19\x7e\x70\xb6\xad\xdf\x8e\x49\xf4\xaa\xc1" +
	"\xcb\x33\x28\x0b\x29\x30\x11\x90\xe9\x99\x71\xaa\x41\x0a\x7c\xdd\x80\xb8\x0b\xe2\x25\x15\x19\x07\x75\x4a\xf5\x12" +
	"\x2d\x64\xd2\xe6\xb3\x7d\x56\xe7\x14\x1e\x63\xf3\xe1\x38\xb3\xae\x6d\x5f\x62\xef\xb0\x71\x5e\x55\x24\x24\xaf\x49" +
	"\x8b\x8c\xc7\x6d\xe2\x05\x4d\x00\x59\x85\x3f\x81\xae\x51\xc5\x92\x2c\x66\xb0\x39\x71\x27\xa7\x53\x12\x86\x8e\x63" +
	"\xfd\x68\x28\xb6\x2f\xfd\x7d\x47\x42\xd7\x97\x1d\x30\x91\xc1\x43\x18\x5f\x5d\x9a\xa8\xba\x6a\x09\xb2\x52\x1c\xa5" +
	"\xb0\xe7\x5e\x1b\x0b\x18\x4d\x8c\xea\x35\x6c\xb9\x70\x62\x23\xf2\xc2\xf8\xc9\x84\xd3\x86\x87\x8d\x6c\x4d\xa5\xb1" +
	"\x47\x93\x23\x81\xb5\x4a\x2f\x3d\x3a\x1b\x96\x53\xe7\xc1\x32\x39\x83\x82\xd3\x14\xa2\x95\xe2\x06\xb8\xae\xd7\xd7" +
	"\x26\x58\xdc\xeb\xce\x0f\xeb\xf5\x75\x75\x6d\x20\xae\x21\xf9\x68\x1a\x91\x9f\x62\xcf\xdc\xa7\x43\x1f\xec\x02\x05" +
	"\xb7\x28\x38\x82\xde\x21\x67\x20\x74\x82\xda\x1e\x83\x5e\x4a\x3c\x14\xc5\x98\x60\x28\x47\x5c\x6b\xfe\x3c\xc5\x37" +
	"\xf5\xbe\x5d\x81\x7a\x6c\x14\x47\x01\xa6\x44\xc1\x6d\xf2\x36\xcb\xfe\x81\x34\x5b\x43\x1a\xfc\x1e\x50\xae\xd6\xac" +
	"\x5d\xf7\x5a\x2c\x96\x40\x33\x50\x5b\x78\x7c\x36\xc4\x67\x31\x69\x59\xaf\x63\xbc\x6f\x75\x18\x41\x37\xbf\x27\x53" +
	"\xe2\x2a\xc4\x27\xd0\x48\x32\xf9\xf7\x27\xd1\x4c\x73\x83\x14\xfd\xe2\x69\x25\xb0\x99\xd6\xba\xe7\x07\x13\xe4\xe6" +
	"\xed\x13\xc6\x0d\x28\x59\x3d\x5b\x1d\xcd\x80\xa5\x9f\x60\xea\x79\xae\x93\xf3\x42\x31\xa1\xe7\x51\xf8\xf2\xce\xda" +
	"\xa5\x65\x91\xb8\xe1\xd3\xee\x38\x86\x6c\xfe\x14\xa3\x3f\x87\x9d\xf7\x41\x30\x18\xc7\x83\xb8\x58\x9b\xcf\xa0\xe3" +
	"\x0f\x2d\xb0\x18\x16\xee\x50\x0a\x0d\x42\x1f\xa0\x61\xeb\xa6\xe5\x18\x32\x46\x1d\x4e\x86\xd8\x6e\x64\x8f\x0e\x93" +
	"\xf0\xd2\xb8\x2d\x50\x47\x1e\x4c\x28\x8b\x9a\xef\x60\x2e\x15\x44\x2d\xc8\x1b\xb9\x30\x18\xa1\x00\x71\x9d\x87\x65" +
	"\x61\x70\x18\xa3\x04\xe5\x7a\x2f\xa3\x1a\xed\xf0\xe9\x0f\x53\x22\x18\x77\xe2\xbb\x92\x2c\x18\x1f\xd9\x3f\xb6\x09" +
	"\x4f\xfe\x50\xb4\x88\x40\xa9\x11\x09\x31\x1f\xa1\xd4\x64\x4e\x19\x87\xcc\x46\x92\x13\x0d\x5b\x84\x0c\x52\x99\x41" +
	"\xb6\x59\x0b\xec\x11\x36\x27\x28\x50\x72\xae\xa9\x5e\x95\x66\x74\xfa\x95\xfc\xf2\xe6\x8d\xe3\xef\x64\x72\xb8\xf1" +
	"\x55\xe4\x54\x95\x4b\xca\xeb\x12\x13\x59\x65\x7e\x74\x4c\xe2\xbf\x6d\x6a\xf0\x14\x15\xfc\xbd\x1c\x5b\x11\xe5\x2e" +
	"\xef\x68\x64\x4d\x5f\xd9\x60\xdc\x6d\x9b\x0f\xf8\x6f\x1e\x85\x9f\x2f\x2e\x4e\xc9\xcb\x6c\x42\x5e\x96\xe1\xa8\xaf" +
	"\xa5\x7f\x60\x3c\x1c\xb7\xad\x46\xe7\x1a\xbc\xca\xd6\xb3\x6f\xf1\xd1\x36\xc7\xa2\x05\x6a\x03\x38\x93\xda\x2b\x3a" +
	"\x76\xa8\xfd\x30\xb5\x44\x1b\xc5\x02\x3a\x4e\xc1\x71\x01\xd4\x9c\xa6\xb0\xae\x30\xbf\x92\x68\xc3\x6b\x71\x07\xa5" +
	"\x3c\xb4\x1b\x4b\x74\x44\x31\x36\x19\x6e\x44\x1d\xac\xdf\x9b\x0e\xd9\x60\x7a\xa7\xeb\x7e\x56\xa3\xe3\xbb\xaa\xff" +
	"\x45\xcb\x13\x5b\x17\x5a\x8b\x51\xad\x21\x2f\x34\xca\xf7\x06\xbf\xcf\xa5\x22\xf5\xb3\x5f\x8d\x7c\x56\x81\xe4\xad" +
	"\x7d\x58\x36\xf0\xe8\x8e\xbd\x7e\x6d\xcd\x13\xf4\x0c\xe3\x22\x7a\x48\xc5\x46\x9d\xff\x46\xd9\x0d\x2d\xe3\x76\x32" +
	"\x0d\xa6\xc7\x66\x52\x1c\xca\x15\xcf\x88\x90\x9a\xa4\x94\x73\xe2\xbc\xe5\x7b\xda\x26\x2d\xcc\x7f\x4c\x75\x9a\xea" +
	"\x15\xe5\xa4\x15\x44\x9e\x94\x53\x9d\x2e\xdd\x64\x10\xb4\x6b\xbb\x21\xb8\x28\x38\xb6\x9f\x7d\x4d\x0b\xec\x85\xd6" +
	"\x60\x36\x1d\x3e\x81\x36\xa7\x7e\xa7\x7c\x65\xb3\x3f\x31\x58\xfa\xa0\x1d\x8a\x9e\x03\x87\x54\x5b\xd0\x77\x25\xf0" +
	"\x2d\xe7\xe7\xa0\x35\xb6\x3b\x51\xdc\x4d\x95\x2d\x36\x79\x8a\x51\x16\xa0\x49\x2d\xfc\x1d\x4a\xe3\x0c\xe2\x2d\x12" +
	"\x18\x6a\x5b\x78\x23\xb9\xad\x4c\x17\x88\x98\x46\xc8\xcb\xab\xd9\xa3\x06\x93\x68\x1f\x1e\x0a\x48\x35\x64\xe4\x4f" +
	"\x62\x4b\x15\x09\x5f\xde\x62\x1e\xc6\x23\x67\xdb\xef\x13\xfa\x0f\x27\xa6\x75\x02\xa2\xda\x4a\x35\xe2\xfa\xfa\x6a" +
	"\xc9\xf5\x6d\xbe\xa1\x32\xa0\x85\x63\xbe\x7b\xaf\xa9\xbb\x3d\x8e\x35\xee\xd9\x64\x26\x29\x15\x68\x27\x05\x34\x5d" +
	"\x92\x0c\x4a\x0c\x57\x52\x9a\xbb\x66\x90\xd2\x55\x09\xe4\x65\x49\x58\x69\xe1\x71\xc3\x79\xbb\x0d\xd2\x08\xd9\xde" +
	"\x12\x04\x41\x30\x53\x40\x6f\x5a\xd4\xa6\x98\x07\x55\xbf\xcb\x32\xdf\x35\xcb\x21\x39\xe7\x00\x45\x64\x57\x07\x9c" +
	"\x62\x41\x7f\x65\x9f\x43\x2a\x45\xd6\x06\x67\x04\x57\x07\x02\x7f\x9f\xee\x46\x81\xae\x75\x4e\xe0\x3e\x0a\x8f\xe9" +
	"\x03\xcb\x57\x79\x7d\x45\x49\xe0\x21\x05\xc8\x7a\x65\xb3\x29\x2c\x03\xf8\xd9\x9b\xaa\xcf\x60\xc1\x4a\x2c\x0e\x65" +
	"\x77\x00\xb7\x23\x96\x92\x52\xd7\x95\xe4\x4c\x4a\x5d\xaf\x16\xca\xde\x14\x65\xce\x4d\xc9\x8f\x66\x51\x96\x1c\x5a" +
	"\x92\xd5\xe2\x6b\x09\x93\xce\x58\xe5\x06\x60\x33\x99\x5a\x4a\x72\xe1\xda\x4a\x47\xfa\x4d\x8a\xc5\xc4\x45\xbc\xba" +
	"\xc9\xe4\xbd\x88\x06\xd7\x32\x23\xa7\xb3\x71\xca\xe6\x7c\x37\x25\x5a\xad\x00\x4d\xd0\xaa\xba\xb5\x26\x6e\x32\x9e" +
	"\xf6\x04\xe8\x1c\x41\x39\x7c\xea\xed\x12\xc4\x9a\xb9\xd9\x69\x76\x97\x40\xe8\x60\x34\xe2\x76\xeb\xe0\x89\x9e\x59" +
	"\xf0\x0a\x62\x4a\x06\x49\x41\x69\xca\x04\x81\x3b\x10\x9a\x48\xe5\x93\x00\xbb\x35\x62\x9d\xcd\xc4\xa2\x63\xbc\xf0" +
	"\x1d\x97\xe9\x0d\xc6\x07\xa4\x2b\x23\x27\x5a\x64\x55\x42\x49\x0a\x69\xdb\x14\x2d\x49\x01\x8a\xc9\x8c\x21\x3e\x3f" +
	"\x92\x74\x09\xe9\xcd\xf7\xb0\xac\xea\x08\xc0\x0e\xd5\x69\x17\xa1\x4a\x1b\x83\xd8\xb6\x8a\x1d\xd8\x9a\x5d\x2f\xa7" +
	"\xea\xf5\x54\x33\x5f\x63\xf0\xbb\x9c\x4d\xf3\x6c\x9b\x31\x5b\xc1\x96\x7c\x2d\x5b\x01\xe5\xe7\x8d\xe4\x2d\x67\x14" +
	"\x8d\xd0\x24\xbc\x7b\x32\x21\x97\xdd\x8d\x4f\xd0\x19\x9a\x36\xdf\x0b\x02\xc3\xa7\xcd\x64\xa3\xff\xf7\x7b\x9e\x21" +
	"\x52\x3b\x01\xfc\x96\xaf\x3e\xbd\x2d\x05\x4c\x48\xfa\xd8\x47\xf1\xd5\xa2\x9c\x10\x6b\x8c\x63\x26\x10\x1d\x4e\xf0" +
	"\x19\x82\x11\x07\xb1\xb3\xe6\xfb\x4b\xce\x56\x62\x42\xd0\x05\x11\x5a\xf7\x55\xc7\xb4\x23\x42\xd5\xa2\xf4\xd6\xf1" +
	"\x2e\x6a\xf7\xd6\x4f\x6c\xb6\x5e\x3c\x74\x06\xf1\x1d\x92\x21\xcb\x4b\xbc\xf5\x81\x54\xd5\xd5\x66\x3b\x32\xd4\xa7" +
	"\x07\x41\xc0\xe5\x22\xf9\x48\x35\xe5\x51\x8c\xd5\x04\xcb\x57\x9c\x1c\x97\x8b\x28\x34\xb5\xc5\xf4\x20\x18\xb6\xb1" +
	"\xf7\x8e\xfb\x50\x7b\xc9\x7d\xc7\x73\xed\x60\xf6\x5b\x55\x8b\xff\x88\xbd\xdc\xd4\xb4\x7a\x8b\xdf\xe8\xe2\x47\xbf" +
	"\x28\xee\x2f\xf8\xba\x95\xe3\xa9\x6b\xbe\x5e\x6a\x6c\xc9\x0c\xdf\x28\xc1\x03\xcd\x0b\x0e\xa5\xeb\x57\x1d\xa5\x61" +
	"\x06\x0f\x86\xcb\x87\xfa\x58\x1d\x8e\xfe\xbd\xd7\x53\x12\x12\xb3\xfa\xf2\x38\xe8\xcc\x80\x73\x43\x14\x93\xd7\x24" +
	"\x34\x0e\xf7\x62\xbb\x5c\x33\x0f\x01\x1d\xf6\x4f\x11\x0e\x96\xca\x5d\xa9\xbb\x2d\x73\xb7\x26\xee\xf6\xbc\xdd\x9d" +
	"\xb6\x9b\x59\xbb\x91\x99\xd5\x68\x70\x9a\xdf\x99\xb1\x03\x09\x7b\xdd\x4a\xd8\xeb\xb8\xa7\xcf\x67\x96\x65\x20\x1a" +
	"\x9e\xf6\xfb\xc4\xb4\x2d\x9e\xb6\x45\x0e\xe7\xbc\x89\x77\xb6\x3b\xf7\x4d\x2c\xd8\x8a\x00\xdf\x05\x00\xb5\x2a\x03" +
	"\x9b\x8c\x20\x98\xc9\xec\x71\xd4\x9e\xbd\x3f\x81\xc6\x13\xd1\xe6\xae\xc2\x32\xb8\x1c\x16\xb2\xaa\x26\x57\x75\xba" +
	"\x0e\xb7\xad\x3b\xb2\xfe\xab\xa0\x33\x0e\x58\xe9\xb0\xdb\x46\x91\x7c\xea\x57\x03\xb0\xdc\xe9\x5c\x93\x13\x80\xac" +
	"\xac\x17\x05\xa4\xaa\x70\x58\x68\xfa\xc5\x7f\xf9\xe0\x7e\xda\x60\xf6\x6d\x38\x7c\x2e\x08\xee\xd8\xaf\x37\x8b\xf5" +
	"\xef\xb5\x9c\xc5\xcb\xd4\x6d\x34\xfa\x43\x5b\x6b\x48\xe9\x6d\x58\x3e\x4a\x95\x63\x73\xaa\xdc\xa7\x68\xd7\x66\x65" +
	"\x97\x00\xee\x22\xe4\xde\x59\xa3\xb4\x59\x0f\x76\x5b\x76\xae\xb8\x3d\xf5\x38\x39\x34\xc5\xf9\x2b\xb6\x6d\x89\x5b" +
	"\xe8\x36\xbc\x2f\xee\xb0\xb9\x0c\x37\x36\xde\xe1\x15\x99\xfa\xb8\x7e\x81\x9d\xe9\x55\x8b\x65\x2f\xe2\x76\x4d\xbf" +
	"\x5b\x42\x74\xcb\x0f\x8e\xce\x23\xcd\xf2\xf6\x9b\xbf\x3a\xb6\x0a\x7a\x70\xbf\xab\xba\x74\xf9\x9a\xe0\x2d\xcd\xbc" +
	"\x25\x6d\x47\x87\x48\xd3\xe9\x8f\x9e\x3f\x7d\x37\x17\x1a\x58\xf0\xf6\xed\x0f\xdd\x3b\x42\x7a\x67\x50\x3d\x61\xfa" +
	"\xee\x46\x18\x6a\xa1\x16\x75\x0e\xa2\x9a\x9b\x8b\xe0\xce\x64\x3d\xec\xae\xee\xcf\x30\x59\xdf\x72\x9b\x91\xf5\x7f" +
	"\x62\x3b\x17\x4f\xc9\x39\x68\x83\xfb\x2f\x58\xe6\x00\xff\x29\x36\xdb\xdd\x5f\xba\x48\xde\x86\xab\x43\xa1\xd9\x72" +
	"\x65\x0b\x4d\xef\x77\xf7\x94\x3b\x4c\xe2\x16\x15\x66\x40\x6f\xd9\xa0\xea\x77\x97\xfd\xfa\xed\xea\xba\xfd\xd6\x1f" +
	"\x9c\x5a\xbd\xe6\x70\xab\x59\xaf\x4e\xa3\xb8\xdb\x53\x56\xfb\x7b\xff\x09\x00\x00\xff\xff\xb5\x07\x81\xb3\x3d\x24" +
	"\x00\x00")

func bindataTemplatescommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatescommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatescommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatescommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9277,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1557520922, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesmaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xb1\x6a\xc3\x30\x10\x86\x67\x0b\xf4\x0e\x87\x87\x62\x43\x23\xa7" +
	"\xab\xb7\xd0\x7a\xe8\xd2\x94\x52\xba\xab\xf2\x59\x39\x6a\x9d\x84\x2c\x87\x14\xe3\x77\x2f\xd2\xd0\x6c\x77\xff\x77" +
	"\xf7\xf3\x05\x6d\x7e\xb4\x45\x70\x9a\x58\x0a\x29\xc8\x05\x1f\x13\x34\x52\x54\xb5\xa5\x74\x59\xbf\x95\xf1\xae\x1b" +
	"\x35\x13\xce\x36\xe9\xdf\xd9\xc7\xce\x07\x64\x1d\xe8\x60\x66\x3a\x58\x64\x8c\x3a\xf9\xd8\x99\x99\x6a\x29\xda\xdc" +
	"\x32\xad\x6c\x4a\x65\xd3\xc2\x26\x45\x65\x66\x52\xaf\x4c\xa9\x79\xc8\xd3\xb3\xe7\x89\x6c\xce\xab\x53\x08\x6f\xda" +
	"\x61\x0f\x00\xf5\xb6\x81\xca\x0b\xec\x7b\xfd\x98\xe1\xc0\xd7\xf7\x88\x13\xdd\xfa\x3b\x1c\xf8\xfa\xcf\xbf\x30\x2e" +
	"\xe4\xb9\x3c\x3f\xa9\xa3\x3a\x96\x78\x2f\x06\x55\xd7\xc1\xe7\xf9\xe5\xdc\xc3\x69\x1c\x21\xa2\xa5\x25\x61\x04\xe3" +
	"\x9d\xd3\x3c\x2e\x70\xc1\x88\xaa\x1c\x66\xa3\x0f\xef\x93\x1a\x6e\x68\xd6\x84\x4d\x2b\xc5\x2e\xc5\x5f\x00\x00\x00" +
	"\xff\xff\x39\x06\x3a\x58\x19\x01\x00\x00")

func bindataTemplatesmaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesmaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesmaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesmaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 281,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1557517289, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatescommandstmpl,
	"templates/main.tmpl":     bindataTemplatesmaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatescommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesmaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
